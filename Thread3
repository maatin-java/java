package Thred;

//生产者消费模型——并发编程的常用模型
//阻塞队列：生产消费模型的一种实现方式 1.若队列已满，入队操作会阻塞等待，直到队列存在空闲位置
//                                     2.若队列为空，出队列操作会阻塞等待，直到队列里被放入数据

//对象等待集（wait/notify）

public class ThreadDmeo10 {
    static class BlockingQueue {
        private int[] array = new int[1000];
        private volatile int size = 0;
        private volatile int head = 0;
        private volatile int tail = 0;

        //入队列
        public void offer(int value) throws InterruptedException {
            synchronized (this) {
                while (size == array.length) {
                    wait();
                }
                array[tail] = value;
                tail++;
                if (tail == array.length) {
                    tail = 0;
                }
                size++;

                notify();//唤醒消费者获取数据（唤醒poll里的wait）
            }


        }

        //出队列
        public int poll() throws InterruptedException {
            int ret = 0;
            synchronized (this) {
                while (size==0){
                    wait();
                }
                ret = array[head];
                head++;
                if (head == array.length) {
                    head = 0;
                }
                size--;

                notify();//唤醒生产者插入数据（唤醒offer里的wait）

                return ret;
            }
        }
        //当队列为满，生产者在等待的时候，此时消费者操作然后唤醒生产者继续生产
        //当队列为空，消费者在等待的时候，此时生产者操作然后唤醒消费者继续消费
        //互相唤醒，且同一时间只有一个notify运行

        public static void main(String[] args) throws InterruptedException {
            BlockingQueue blockingQueue = new BlockingQueue();

            //消费者线程
            Thread customer = new Thread(){
                @Override
                public void run() {
                    while (true){
                        try {
                            int vaule = blockingQueue.poll();
                            System.out.println("消费者"+vaule);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            };
            customer.start();

            //生产者线程
            Thread producer = new Thread(){
                @Override
                public void run() {
                    for (int i = 0; i < 10000; i++) {
                        try {
                            blockingQueue.offer(i);
                            System.out.println("生产者"+i);
                            Thread.sleep(300);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                    }

                }
            };
            producer.start();

            customer.join();
            producer.join();

        }
    }
}
