package Arr.LinkList;

import java.util.Arrays;

public class TestSort {
    public static void mergeSort(int []array){
        mergeSortInternal(array,0,array.length-1);
    }
    public static void mergeSortInternal(int [] array,int low ,int high){
        if(low>=high) return;//截止条件
        int mid=(low+high)/2;

        mergeSortInternal(array,low,mid);//左边
        mergeSortInternal(array,mid+1,high);//右边
        //分解已完成

        merge(array,low,mid,high);
        //拆分不需要重建一个数组，只是用下标的表示来代表拆分，合并时需要新建一个
    }
    public static void merge(int[]array,int low,int mid,int high){
    int s1=low;//表示第一个归并段的开始
    int s2=mid+1;//表示第二个归并段的开始
    int len = high-low+1;
    int [] tmp = new int [len];//每次归并后的数组大小
    int i  = 0;//tmp的下标

        //两个归并段都有数据
        while(s1<=mid && s2<=high){
            if(array[s1]<=array[s2]){
                tmp[i]=array[s1];
                i++;
                s1++;
            }else {
                tmp[i]=array[s2];
                i++;
                s2++;
            }
        }
        //第一个归并段还有数据
        while(s1<=mid){
            tmp[i]=array[s1];
            i++;
            s1++;

        }
        //第二个归并段还有数据
        while(s2<=high){
            tmp[i]=array[s2];
            i++;
            s2++;

        }
        //把tmp的数据拷贝到array里
        for(int j = 0;j<len;j++){
            array[low+j]=tmp[j];
        }
    }

    public static void main(String[] args) {
        int [] array={1,3,5,2,7,1,9};
        mergeSort(array);
        System.out.println(Arrays.toString(array));
    }

}
