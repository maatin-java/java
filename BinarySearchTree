package Arr;

public class BinarySearchTree {

    static class Node{

        public int data;
        public Node left;
        public Node right;

        public Node(int data) {
            this.data = data;
        }

    }


    public Node root=null;
    public Node search(int val) {
        Node cur = root;

        while (cur != null) {
            if (cur.data > val) {
                cur = cur.left;
            } else if (cur.data < val) {
                cur = cur.right;
            } else {
                return cur;
            }
        }
        return null;
    }


    public boolean insert(int key){
        Node node=new Node(key);
        if(root==null){
            root=node;
            return true;
        }
        Node parent =null;
        Node cur=root;
        while(cur!=null){
            if(cur.data==key){
                return false;
            }
            else if(cur.data<key){
                parent=cur;
                cur=cur.right;
            }else{
                parent=cur;
                cur=cur.left;
            }

        }if(parent.data<key){
            parent.left=node;
        }else{

            parent.right=node;
        }
        return true;
    }
    public void remove(int key) {
        Node parent = null;
        Node cur = root;
        while (cur != null) {
            if(cur.data == key) {
                removeNode(parent,cur);
                return;
            }else if(cur.data < key) {
                parent = cur;
                cur = cur.right;
            }else {
                parent = cur;
                cur = cur.left;
            }
        }
    }
    private void removeNode(Node parent,Node cur) {
        if(cur.left == null) {
            //3种情况
            if(cur==root){
                root=cur.right;
            }else  if (cur==parent.left){
                parent.left=cur.right;
            }else{
                parent.right=cur.right;

            }

        }else if(cur.right == null) {
            if(cur==root){
                root=cur.left;
            }else  if (cur==parent.right){
                parent.right=cur.left;
            }else{
                parent.left=cur.left;

            }

        }else {//左面：右子节点为空，那么这个数就是左边最大值
            /*Node targetParent = cur;
            Node target= cur.right;

            while(target.left!=null){
                targetParent=target;
                target=target.left;
            }
            cur.data = target.data;
            if(target==targetParent.left){
                targetParent.left=target.right;
            }else {
                targetParent.right=target.right;
            }
            targetParent.left=target.right;
            */


        }
        Node targetParent = cur;
        Node target= cur.left;

        while(target.right!=null){
            targetParent=target;
            target=targetParent.left;
        }
        cur.data=target.data;
        if(target==targetParent.left){
            targetParent.right=target.left;
        }else {
            targetParent.left=target.left;
        }

    }

    }
