package Thred;

public class ThreadDemo6 {
    static class Counter {
        volatile public int count = 0;

        public void increase(){
            count++;
        }
    }
            public static void main(String[] args) throws InterruptedException {
                Counter counter = new Counter();
                Thread t1 = new Thread(){
                    @Override
                    public void run() {
                        for (int i = 0; i <50000 ; i++) {
                            counter.increase();
                        }
                    }
                };
                t1.start();

                Thread t2 = new Thread(){
                    @Override
                    public void run() {
                        for (int i = 0; i <50000 ; i++) {
                            counter.increase();
                        }
                    }
                };
                t2.start();

                t1.join();
                t2.join();
                System.out.println(counter.count);

        }
    }
//排队在前面的线程，因为一直时机不成熟就一直占用锁，导致后面排队的锁饿死
//解决方案是，该线程发现条件未成熟就先释放锁，并且等待，等到有其他线程通知条件已成熟，再去把这个线程唤醒
//这个操作的关键是根据实际情况来调整线程执行的先后顺序——等待集
