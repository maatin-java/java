   //非递归实现归并
    public static void merge2(int []array,int gap){
        int s1=0;
        int e1=s1+gap-1;
        int s2=e1+1;
        int e2=s2+gap-1>=array.length? array.length-1:s2+gap-1;//判断是否超出长度
        int [] tmp = new int[array.length];
        int k =0;

        //两个归并段都有数据
        while(s2<array.length){//s2还在数组内，没有走出去
            while (s1<=e1&&s2<=e2){
                if(array[s1]<=array[s2]){
                    tmp[k]=array[s1];
                    k++;
                    s1++;
                }else {
                    tmp[k]=array[s2];
                    k++;
                    s2++;
                }
            }
            while(s1<=e1){
                tmp[k]=array[s1];
                k++;
                s1++;
            }
            while(s2<=e2){
                tmp[k]=array[s2];
                k++;
                s2++;
            }
            //走到这里说明已经归并了第一次
            s1=e2+1;
            e1=s1+gap-1;
            s2=e1+1;
            e2=s2+gap-1>=array.length? array.length-1:s2+gap-1;

        }
        //根本没有第二个归并段
        while (s1<=array.length-1){
            tmp[k]=array[s1];
            k++;
            s1++;
        }
        //走到这里说明所有数据放入了tmp
        for(int i =0;i<tmp.length;i++){
            array[i]=tmp[i];
        }

    }

    public static void main(String[] args) {
        int [] array={1,3,5,2,7,1,9};
        //mergeSort(array);//递归方法的归并排序
        mergeSort1(array);
        System.out.println(Arrays.toString(array));
    }

}
